<!-- 
    Copyright 2014 Travel Modelling Group, Department of Civil Engineering, University of Toronto

    This file is part of XTMF.

    XTMF is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    XTMF is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with XTMF.  If not, see <http://www.gnu.org/licenses/>.
-->
<Application x:Class="XTMF.Gui.App" 
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:local="clr-namespace:XTMF.Gui"
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:dragablz="http://dragablz.net/winfx/xaml/dragablz"
             xmlns:wpf="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:converters="clr-namespace:XTMF.Gui.Converters"
              xmlns:local2="clr-namespace:Dragablz.Themes;assembly=Dragablz"
              xmlns:converters1="clr-namespace:MaterialDesignThemes.Wpf.Converters;assembly=MaterialDesignThemes.Wpf"
              Startup="App_OnStartup"

             ShutdownMode="OnExplicitShutdown">
    <Application.Resources>

        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Fonts.xaml" />

                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Dark.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Primary/MaterialDesignColor.Blue.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Accent/MaterialDesignColor.Amber.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.TextBox.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.PopupBox.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.ComboBox.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.ListView.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Slider.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.ToggleButton.xaml" />

                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.MahApps;component/Themes/MaterialDesignTheme.MahApps.Fonts.xaml" />

                <!-- Include the Dragablz Material Design style -->
                <ResourceDictionary Source="pack://application:,,,/Dragablz;component/Themes/materialdesign.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Button.xaml" />
                <ResourceDictionary Source="Resources/ControlStyles.xaml"/>
                <ResourceDictionary Source="Resources/XtmfMaterialStyles.xaml"/>
            </ResourceDictionary.MergedDictionaries>

            <Style TargetType="ContextMenu" BasedOn="{StaticResource MaterialDesignContextMenu}">
                <Setter Property="Background" Value="{DynamicResource MaterialDesignCardBackground}" />
            </Style>

            <Style TargetType="ComboBox" BasedOn="{StaticResource MaterialDesignFloatingHintComboBox}"/>

            <Style TargetType="Button" BasedOn="{StaticResource MaterialDesignFlatButton}">
                <Setter Property="Foreground" Value="{DynamicResource SecondaryHueMidBrush}" />
            </Style>

            <Style TargetType="ListView" BasedOn="{StaticResource MaterialDesignListView}" />

            <Style x:Key="MaterialDesignXtmfDragableTabItemStyle" TargetType="{x:Type dragablz:DragablzItem}" BasedOn="{StaticResource MaterialDesignDragableTabItemStyle}">
                <Style.Setters>
                    <Setter Property="Height" Value="30"/>
                    <Setter Property="Padding" Value="8,0,0,0"/>
                </Style.Setters>
                <Style.Triggers>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsMouseOver" Value="True" />
                        </MultiTrigger.Conditions>
                        <Setter Property="Background" Value="{DynamicResource PrimaryHueLightBrush}" />
                    </MultiTrigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsSelected" Value="True" />
                        </MultiTrigger.Conditions>
                        <Setter Property="Background" Value="{DynamicResource SecondaryHueMidBrush}" />
                        <Setter Property="Foreground" Value="{DynamicResource SecondaryHueMidForegroundBrush}" />
                    </MultiTrigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="{x:Type dragablz:TabablzControl}" x:Key="MaterialDesignXtmfRootTabablzControlStyle">
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=Window}, Path=Background}" />
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
                <Setter Property="TextElement.Foreground" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=Window}, Path=(TextElement.Foreground)}" />
                <Setter Property="ItemContainerStyle" Value="{StaticResource MaterialDesignXtmfDragableTabItemStyle}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type dragablz:TabablzControl}">
                            <Grid x:Name="templateRoot" ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
                                <Grid.RowDefinitions>
                                    <RowDefinition x:Name="RowDefinition0" Height="Auto"/>
                                    <RowDefinition x:Name="RowDefinition1" Height="*"/>
                                </Grid.RowDefinitions>
                                <Border x:Name="contentPanel" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1,0,1,1" Background="{TemplateBinding Background}" Grid.Column="0" 
                                        KeyboardNavigation.DirectionalNavigation="Contained" Grid.Row="1"
                                        KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local"
                                Margin="0 0 0 0">
                                    <Grid x:Name="PART_ItemsHolder" />
                                </Border>
                                <Grid Grid.Column="0" Grid.Row="0" x:Name="HeaderContainerGrid" Visibility="{TemplateBinding IsHeaderPanelVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
                                    <Grid.Resources>
                                        <Style TargetType="{x:Type Button}" BasedOn="{StaticResource StandardEmbeddedButtonStyle}"/>
                                    </Grid.Resources>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="*" />
                                    </Grid.ColumnDefinitions>
                                    <Border Background="{TemplateBinding BorderBrush}" 
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="1,0,1,0" Grid.ColumnSpan="4"
                                            Margin="0" Padding="0">
                                    </Border>
                                    <ContentControl Grid.Column="0" x:Name="PrefixContentControl" 
                                            Content="{TemplateBinding HeaderPrefixContent}"
                                            ContentStringFormat="{TemplateBinding HeaderPrefixContentStringFormat}"
                                            ContentTemplate="{TemplateBinding HeaderPrefixContentStringFormat}"
                                            ContentTemplateSelector="{TemplateBinding HeaderPrefixContentTemplateSelector}"/>
                                    <dragablz:DragablzItemsControl x:Name="PART_HeaderItemsControl"                                                         
                                                           Grid.Column="1"
                                                           FixedItemCount="{TemplateBinding FixedHeaderCount}"
                                                           ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Items}"                                                                                                            
                                                           ItemContainerStyle="{TemplateBinding ItemContainerStyle}"
                                                           ItemsOrganiser="{TemplateBinding HeaderItemsOrganiser}"
                                                           KeyboardNavigation.TabIndex="1" Panel.ZIndex="1"
                                                           ItemTemplate="{TemplateBinding HeaderItemTemplate}"
                                                           Style="{StaticResource TabablzDragablzItemsControlStyle}"
                                                                   Margin="1,0,1,-2"
                                                                   Padding="0">
                                        <dragablz:DragablzItemsControl.MaxWidth>
                                            <MultiBinding>
                                                <MultiBinding.Converter>
                                                    <dragablz:TabablzHeaderSizeConverter Orientation="Horizontal"/>
                                                </MultiBinding.Converter>
                                                <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ActualWidth" />
                                                <Binding RelativeSource="{RelativeSource Self}" Path="ItemsPresenterWidth" />
                                                <Binding ElementName="PrefixContentControl" Path="ActualWidth" />
                                                <Binding ElementName="DefaultAddButton" Path="DesiredSize.Width" />
                                                <Binding ElementName="SuffixContentControl" Path="DesiredSize.Width" />
                                            </MultiBinding>
                                        </dragablz:DragablzItemsControl.MaxWidth>
                                    </dragablz:DragablzItemsControl>
                                    <Button Style="{StaticResource MaterialDesignAddItemCommandButtonStyle}"
                                    x:Name="DefaultAddButton"
                                    Grid.Column="2"
                                    Command="{x:Static dragablz:TabablzControl.AddItemCommand}"
                                    Visibility="{TemplateBinding ShowDefaultAddButton, Converter={StaticResource BooleanToVisibilityConverter}}"
                                    />
                                    <ContentControl Grid.Column="3" x:Name="SuffixContentControl" 
                                            Content="{TemplateBinding HeaderSuffixContent}"
                                            ContentStringFormat="{TemplateBinding HeaderSuffixContentStringFormat}"
                                            ContentTemplate="{TemplateBinding HeaderSuffixContentStringFormat}"
                                            ContentTemplateSelector="{TemplateBinding HeaderSuffixContentTemplateSelector}"
                                            HorizontalAlignment="Stretch"
                                            />
                                </Grid>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="TabStripPlacement" Value="Bottom">
                                    <Setter Property="Grid.Row" TargetName="PART_HeaderItemsControl" Value="1"/>
                                    <Setter Property="Grid.Row" TargetName="contentPanel" Value="0"/>
                                    <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                                    <Setter Property="Height" TargetName="RowDefinition1" Value="Auto"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                </Trigger>
                                <Trigger Property="IsDraggingWindow" Value="True">
                                    <Setter TargetName="DefaultAddButton" Property="Visibility" Value="Hidden" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="TabStripPlacement" Value="Left">
                        <Setter Property="HeaderItemsOrganiser">
                            <Setter.Value>
                                <dragablz:VerticalOrganiser />
                            </Setter.Value>
                        </Setter>
                        <Setter Property="ItemContainerStyle" Value="{StaticResource MaterialDesignDragableTabItemVerticalStyle}" />
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type dragablz:TabablzControl}">
                                    <Grid x:Name="templateRoot" ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition x:Name="ColumnDefinition0" Width="Auto"/>
                                            <ColumnDefinition x:Name="ColumnDefinition1" Width="*"/>
                                        </Grid.ColumnDefinitions>
                                        <Border x:Name="contentPanel" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="1" KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local" Margin="-1 0 0 0">
                                            <Grid x:Name="PART_ItemsHolder" />
                                        </Border>
                                        <Grid Grid.Column="0" x:Name="HeaderContainerGrid" Visibility="{TemplateBinding IsHeaderPanelVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
                                            <Grid.Resources>
                                                <Style TargetType="{x:Type Button}" BasedOn="{StaticResource StandardEmbeddedButtonStyle}" />
                                            </Grid.Resources>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto" />
                                                <RowDefinition Height="Auto" />
                                                <RowDefinition Height="Auto" />
                                                <RowDefinition Height="*" />
                                            </Grid.RowDefinitions>
                                            <Border Background="{TemplateBinding BorderBrush}" Grid.RowSpan="4">
                                                <Border.Effect>
                                                    <DropShadowEffect BlurRadius="5" ShadowDepth="2" Direction="0" Opacity=".5" />
                                                </Border.Effect>
                                            </Border>
                                            <ContentControl Grid.Row="0" x:Name="PrefixContentControl" 
                                                                Content="{TemplateBinding HeaderPrefixContent}"
                                                                ContentStringFormat="{TemplateBinding HeaderPrefixContentStringFormat}"
                                                                ContentTemplate="{TemplateBinding HeaderPrefixContentStringFormat}"
                                                                ContentTemplateSelector="{TemplateBinding HeaderPrefixContentTemplateSelector}"/>
                                            <dragablz:DragablzItemsControl x:Name="PART_HeaderItemsControl"                                                         
                                                                   Grid.Row="1"                                                                   
                                                                   ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Items}"                                                                                                            
                                                                   ItemContainerStyle="{TemplateBinding ItemContainerStyle}"
                                                                   FixedItemCount="{TemplateBinding FixedHeaderCount}"
                                                                   ItemsOrganiser="{TemplateBinding HeaderItemsOrganiser}"
                                                                   KeyboardNavigation.TabIndex="1" Panel.ZIndex="1"
                                                                   ItemTemplate="{TemplateBinding HeaderItemTemplate}"
                                                                   Style="{StaticResource TabablzDragablzItemsControlStyle}">
                                                <dragablz:DragablzItemsControl.MaxHeight>
                                                    <MultiBinding>
                                                        <MultiBinding.Converter>
                                                            <dragablz:TabablzHeaderSizeConverter Orientation="Vertical"/>
                                                        </MultiBinding.Converter>
                                                        <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ActualHeight" />
                                                        <Binding RelativeSource="{RelativeSource Self}" Path="ItemsPresenterHeight" />
                                                        <Binding ElementName="PrefixContentControl" Path="ActualHeight" />
                                                        <Binding ElementName="DefaultAddButton" Path="DesiredSize.Height" />
                                                        <Binding ElementName="SuffixContentControl" Path="DesiredSize.Height" />
                                                    </MultiBinding>
                                                </dragablz:DragablzItemsControl.MaxHeight>
                                            </dragablz:DragablzItemsControl>
                                            <Button Style="{StaticResource MaterialDesignAddItemCommandButtonStyle}"
                                            x:Name="DefaultAddButton"
                                            Grid.Row="2"
                                            Command="{x:Static dragablz:TabablzControl.AddItemCommand}"
                                            Visibility="{TemplateBinding ShowDefaultAddButton, Converter={StaticResource BooleanToVisibilityConverter}}" />
                                            <ContentControl Grid.Row="3" x:Name="SuffixContentControl" 
                                                                Content="{TemplateBinding HeaderSuffixContent}"
                                                                ContentStringFormat="{TemplateBinding HeaderSuffixContentStringFormat}"
                                                                ContentTemplate="{TemplateBinding HeaderSuffixContentStringFormat}"
                                                                ContentTemplateSelector="{TemplateBinding HeaderSuffixContentTemplateSelector}"
                                                                VerticalAlignment="Top" />
                                        </Grid>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsEnabled" Value="false">
                                            <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                        </Trigger>
                                        <Trigger Property="IsDraggingWindow" Value="True">
                                            <Setter TargetName="DefaultAddButton" Property="Visibility" Value="Hidden" />
                                        </Trigger>
                                        <Trigger Property="TabStripPlacement" Value="Right">
                                            <!-- TODO -->
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="{x:Type dragablz:TabablzControl}" x:Key="MaterialDesignXtmfTabablzControlStyle" BasedOn="{StaticResource MaterialDesignXtmfRootTabablzControlStyle}">
                <!-- <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignPaper}" /> -->
                <Setter Property="ItemContainerStyle" Value="{StaticResource MaterialDesignXtmfDragableTabItemStyle}" />
                <Style.Triggers>
                    <Trigger Property="TabStripPlacement" Value="Left">
                        <Setter Property="ItemContainerStyle" Value="{StaticResource MaterialDesignAlternateDragableTabItemVerticalStyle}" />
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="{x:Type dragablz:TabablzControl}" x:Key="MaterialDesignXtmfSubTabablzControlStyle" BasedOn="{StaticResource MaterialDesignXtmfRootTabablzControlStyle}">
                <!-- <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignPaper}" /> -->
                <Setter Property="ItemContainerStyle" Value="{StaticResource MaterialDesignXtmfDragableTabItemStyle}" />
                <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignPaper}" />
                <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBody}" />
                <Style.Triggers>
                    <Trigger Property="TabStripPlacement" Value="Left">
                        <Setter Property="ItemContainerStyle" Value="{StaticResource MaterialDesignAlternateDragableTabItemVerticalStyle}" />
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="{x:Type dragablz:TabablzControl}" BasedOn="{StaticResource MaterialDesignXtmfTabablzControlStyle}" />
            <SolidColorBrush x:Key="HighlightBrush" Color="{DynamicResource Primary700}"/>
            <SolidColorBrush x:Key="AccentBaseColorBrush" Color="{DynamicResource Primary600}" />
            <SolidColorBrush x:Key="AccentColorBrush" Color="{DynamicResource Primary500}"/>
            <SolidColorBrush x:Key="AccentColorBrush2" Color="{DynamicResource Primary400}"/>
            <SolidColorBrush x:Key="AccentColorBrush3" Color="{DynamicResource Primary300}"/>
            <SolidColorBrush x:Key="AccentColorBrush4" Color="{DynamicResource Primary200}"/>
            <SolidColorBrush x:Key="WindowTitleColorBrush" Color="{DynamicResource Primary500}"/>
            <SolidColorBrush x:Key="AccentSelectedColorBrush" Color="{DynamicResource Primary500Foreground}"/>
            <LinearGradientBrush x:Key="ProgressBrush" EndPoint="0.001,0.5" StartPoint="1.002,0.5">
                <GradientStop Color="{DynamicResource Primary700}" Offset="0"/>
                <GradientStop Color="{DynamicResource Primary300}" Offset="1"/>
            </LinearGradientBrush>
            <SolidColorBrush x:Key="CheckmarkFill" Color="{DynamicResource Primary500}"/>
            <SolidColorBrush x:Key="RightArrowFill" Color="{DynamicResource Primary500}"/>
            <SolidColorBrush x:Key="IdealForegroundColorBrush" Color="{DynamicResource Primary500Foreground}"/>
            <SolidColorBrush x:Key="IdealForegroundDisabledBrush" Color="{DynamicResource Primary500}" Opacity="0.4"/>
            <SolidColorBrush x:Key="MahApps.Metro.Brushes.ToggleSwitchButton.OnSwitchBrush.Win10" Color="{DynamicResource Primary500}" />
            <SolidColorBrush x:Key="MahApps.Metro.Brushes.ToggleSwitchButton.OnSwitchMouseOverBrush.Win10" Color="{DynamicResource Primary400}" />
            <SolidColorBrush x:Key="MahApps.Metro.Brushes.ToggleSwitchButton.ThumbIndicatorCheckedBrush.Win10" Color="{DynamicResource Primary500Foreground}" />

            <converters:IndexConverter x:Key="IndexConverter" />

            <Style x:Key="MaterialDesignListBoxItemNoTransition" TargetType="{x:Type ListBoxItem}">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                <Setter Property="Padding" Value="8"/>
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListBoxItem}">
                            <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Margin="{TemplateBinding Margin}"
                            ClipToBounds="{TemplateBinding ClipToBounds}">
                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup Name="CommonStates">
                                        <VisualStateGroup.Transitions>
                                            <VisualTransition GeneratedDuration="0:0:0.0" To="Normal">
                                                <VisualTransition.GeneratedEasingFunction>
                                                    <CircleEase EasingMode="EaseOut"/>
                                                </VisualTransition.GeneratedEasingFunction>
                                            </VisualTransition>
                                        </VisualStateGroup.Transitions>
                                        <VisualState Name="Normal"/>
                                        <VisualState Name="MouseOver">
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="MouseOverBorder"
                                                                 Storyboard.TargetProperty="Opacity"
                                                                 To="0.4" Duration="0:0:0.1"/>
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState Name="Disabled"/>
                                    </VisualStateGroup>
                                    <VisualStateGroup Name="SelectionStates">
                                        <VisualStateGroup.Transitions>
                                            <VisualTransition GeneratedDuration="0:0:0.0"/>
                                        </VisualStateGroup.Transitions>
                                        <VisualState Name="Selected">
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="SelectedBorder"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="0.7" Duration="0:0:0.1"/>
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState Name="Unselected"/>
                                        <VisualState Name="SelectedUnfocused">
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="SelectedBorder"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="0.03" Duration="0"/>
                                            </Storyboard>
                                        </VisualState>
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>
                                <Grid>
                                    <Border x:Name="MouseOverBorder"
                                        Opacity="0" BorderThickness="3"
                                        BorderBrush="{TemplateBinding Foreground, Converter={StaticResource BrushRoundConverter}}"/>
                                    <Border x:Name="SelectedBorder"
                                            Opacity="0"
                                            BorderThickness="3"
                                            RenderTransformOrigin="0.5,0.5">
                                        <Border.RenderTransform>
                                            <ScaleTransform ScaleX="1"/>
                                        </Border.RenderTransform>
                                    </Border>
                                    <wpf:Ripple Feedback="{TemplateBinding Foreground, Converter={StaticResource BrushRoundConverter}}"
                                        Focusable="False"
                                        Content="{TemplateBinding Content}"
                                        ContentTemplate="{TemplateBinding ContentTemplate}"
                                        ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                        Padding="{TemplateBinding Padding}"/>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Opacity" Value=".56" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="{x:Type TextBlock}" x:Key="MaterialDesignBody1Custom" >
                <Setter Property="Cursor" Value="Hand"></Setter>
                <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}"></Setter>
            </Style>

            <Style TargetType="{x:Type Hyperlink}" x:Key="MaterialDesignBody1HyperlinkCustom" BasedOn="{StaticResource MaterialDesignBody1Hyperlink}">
                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="Foreground" Value="{DynamicResource SecondaryHueMidBrush}"/>
            </Style>

            <Style x:Key="MaterialDesignFloatingActionMiniDarkButtonXtmf" TargetType="{x:Type Button}" BasedOn="{StaticResource MaterialDesignFloatingActionMiniButton}">
                <Setter Property="Background" Value="{DynamicResource PrimaryHueDarkBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueDarkBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource PrimaryHueDarkForegroundBrush}"/>
                <Setter Property="wpf:ButtonProgressAssist.IndicatorForeground" Value="{DynamicResource PrimaryHueLightBrush}" />
            </Style>

            <Style x:Key="MaterialDesignFloatingActionMiniButtonXtmf" TargetType="{x:Type Button}">
                <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
                <Setter Property="Background" Value="{DynamicResource PrimaryHueMidBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidForegroundBrush}"/>
                <Setter Property="wpf:RippleAssist.Feedback" Value="White" />
                <Setter Property="wpf:ButtonProgressAssist.IndicatorForeground" Value="{DynamicResource SecondaryHueMidBrush}" />
                <Setter Property="wpf:ButtonProgressAssist.IndicatorBackground" Value="{DynamicResource MaterialDesignDivider}" />
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="wpf:ShadowAssist.ShadowDepth" Value="Depth2" />
                <Setter Property="Padding" Value="1"/>
                <Setter Property="Width" Value="40" />
                <Setter Property="Height" Value="40" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid>
                                <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(wpf:ShadowAssist.CacheMode)}">
                                    <Ellipse Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}" 
                                     Effect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ShadowAssist.ShadowDepth), Converter={x:Static converters1:ShadowConverter.Instance}}"
                                     x:Name="border">
                                    </Ellipse>
                                </AdornerDecorator>
                                <ProgressBar x:Name="ProgressBar" 
                                     Style="{DynamicResource MaterialDesignCircularProgressBarXtmf}" 
                                     Minimum="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ButtonProgressAssist.Minimum)}"
                                     Maximum="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ButtonProgressAssist.Maximum)}"
                                     Foreground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ButtonProgressAssist.IndicatorForeground)}"
                                     Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ButtonProgressAssist.IndicatorBackground)}"
                                     Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ButtonProgressAssist.Value)}"
                                     IsIndeterminate="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ButtonProgressAssist.IsIndeterminate)}" 
                                     Margin="-8" 
                                     Width="{TemplateBinding Width, Converter={StaticResource MathAddConverter}, ConverterParameter={StaticResource ProgressRingStrokeWidth}}"
                                     Height="{TemplateBinding Height, Converter={StaticResource MathAddConverter}, ConverterParameter={StaticResource ProgressRingStrokeWidth}}"
                                     HorizontalAlignment="Stretch" 
                                     VerticalAlignment="Stretch"
                                     RenderTransformOrigin=".5, .5">
                                    <ProgressBar.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform ScaleX="0" ScaleY="0" />
                                        </TransformGroup>
                                    </ProgressBar.RenderTransform>
                                </ProgressBar>
                                <Ellipse Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}" />
                                <wpf:Ripple Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" Focusable="False"  
                                    Clip="{Binding ElementName=GeometryEllipse, Path=RenderedGeometry}" ClipToBounds="True"
                                    HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Padding="{TemplateBinding Padding}" 
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                <Ellipse x:Name="GeometryEllipse" Fill="Transparent" IsHitTestVisible="False" Focusable="False" />
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsDefaulted" Value="true">
                                    <Setter Property="Stroke" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Opacity" Value="0.23"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="border" Property="wpf:ShadowAssist.Darken" Value="True" />
                                </Trigger>
                                <Trigger Property="IsKeyboardFocused" Value="true">
                                    <Setter TargetName="border" Property="wpf:ShadowAssist.Darken" Value="True" />
                                </Trigger>
                                <Trigger Property="wpf:ButtonProgressAssist.IsIndicatorVisible" Value="True">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Duration="0:0:0.2" From=".9" To="1" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="ProgressBar"/>
                                                <DoubleAnimation Duration="0:0:0.2" From=".9" To="1" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="ProgressBar"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.EnterActions>
                                    <Trigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Duration="0:0:0.2" From="1" To=".9" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="ProgressBar"/>
                                                <DoubleAnimation Duration="0:0:0.2" From="1" To=".9" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="ProgressBar"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.ExitActions>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="MaterialDesignFloatingActionMiniAccentButtonXtmf" TargetType="{x:Type Button}" BasedOn="{StaticResource MaterialDesignFloatingActionMiniButtonXtmf}">
                <Setter Property="Background" Value="{DynamicResource SecondaryHueMidBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource SecondaryHueMidBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource SecondaryHueLightBrush}"/>
                <Setter Property="wpf:ButtonProgressAssist.IndicatorForeground" Value="{DynamicResource PrimaryHueMidBrush}" />
            </Style>

            <Style x:Key="MaterialDesignCircularProgressBarXtmf" TargetType="{x:Type ProgressBar}">
                <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Width" Value="20" />
                <Setter Property="Height" Value="20" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ProgressBar}">
                            <ControlTemplate.Resources>
                                <Storyboard Timeline.DesiredFrameRate="24" x:Key="IsIndeterminateStoryboard" TargetName="RotateTransform" TargetProperty="Angle" RepeatBehavior="Forever">
                                    <DoubleAnimation From="0" To="359" Duration="0:0:2"   />
                                </Storyboard>
                                <Storyboard Timeline.DesiredFrameRate="24" x:Key="IsFullyIndeterminateScaleStoryboard">
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="FullyIndeterminateGridScaleTransform"
                                                           Storyboard.TargetProperty="ScaleX"
                                                           RepeatBehavior="Forever">
                                        <SplineDoubleKeyFrame KeyTime="0" Value="0.0" />
                                        <SplineDoubleKeyFrame KeyTime="0:0:1" Value="1.0" />
                                        <SplineDoubleKeyFrame KeyTime="0:0:4" Value="0.0" />
                                    </DoubleAnimationUsingKeyFrames>
                                    <DoubleAnimation Storyboard.TargetName="RotateTransform"
                                             Storyboard.TargetProperty="Angle" 
                                             RepeatBehavior="Forever" 
                                             From="00" To="359" Duration="0:0:1.25" />
                                </Storyboard>
                            </ControlTemplate.Resources>
                            <Grid x:Name="TemplateRoot" ClipToBounds="False">
                                <Grid x:Name="FullyIndeterminateGrid">
                                    <Grid.RenderTransform>
                                        <ScaleTransform x:Name="FullyIndeterminateGridScaleTransform" ScaleX="0" />
                                    </Grid.RenderTransform>
                                </Grid>
                                <Grid x:Name="PathGrid" Margin="2" />
                                <Canvas>
                                    <Ellipse Fill="{TemplateBinding Background}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" />
                                    <Path x:Name="Path" Stroke="{TemplateBinding Foreground}" StrokeThickness="3" 
                                  Canvas.Top="2" Canvas.Left="2"
                                  RenderTransformOrigin="0, 0">
                                        <Path.Data>
                                            <PathGeometry>
                                                <PathFigure StartPoint="{Binding ElementName=PathGrid, Path=ActualWidth, Converter={StaticResource StartPointConverter}, Mode=OneWay}">
                                                    <ArcSegment Size="{Binding ElementName=PathGrid, Path=ActualWidth, Converter={StaticResource ArcSizeConverter}, Mode=OneWay}"
                                                        SweepDirection="Clockwise">
                                                        <ArcSegment.IsLargeArc>
                                                            <MultiBinding Converter="{StaticResource LargeArcConverter}">
                                                                <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Value" />
                                                                <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Minimum" />
                                                                <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Maximum" />
                                                                <Binding ElementName="FullyIndeterminateGridScaleTransform" Path="ScaleX" />
                                                            </MultiBinding>
                                                        </ArcSegment.IsLargeArc>
                                                        <ArcSegment.Point>
                                                            <MultiBinding Converter="{StaticResource ArcEndPointConverter}">
                                                                <Binding ElementName="PathGrid" Path="ActualWidth" />
                                                                <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Value" />
                                                                <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Minimum" />
                                                                <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Maximum" />
                                                                <Binding ElementName="FullyIndeterminateGridScaleTransform" Path="ScaleX" />
                                                            </MultiBinding>
                                                        </ArcSegment.Point>
                                                    </ArcSegment>
                                                </PathFigure>
                                            </PathGeometry>
                                        </Path.Data>
                                        <Path.RenderTransform>
                                            <TransformGroup>
                                                <RotateTransform x:Name="RotateTransform"
                                                         CenterX="{Binding ElementName=PathGrid, Path=ActualWidth, Converter={StaticResource RotateTransformCentreConverter}, Mode=OneWay}" 
                                                         CenterY="{Binding ElementName=PathGrid, Path=ActualWidth, Converter={StaticResource RotateTransformCentreConverter}, Mode=OneWay}">
                                                    <RotateTransform.Angle>
                                                        <MultiBinding Converter="{StaticResource RotateTransformConverter}">
                                                            <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Value" />
                                                            <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Minimum" />
                                                            <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Maximum" />
                                                        </MultiBinding>
                                                    </RotateTransform.Angle>
                                                </RotateTransform>
                                            </TransformGroup>
                                        </Path.RenderTransform>
                                    </Path>
                                </Canvas>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsIndeterminate, RelativeSource={RelativeSource Self}}" Value="True" />
                                        <Condition Binding="{Binding IsVisible, RelativeSource={RelativeSource Self}}" Value="True" />
                                        <Condition Binding="{Binding Value, RelativeSource={RelativeSource Self}, Converter={StaticResource NotZeroConverter}}" Value="True" />
                                    </MultiDataTrigger.Conditions>
                                    <MultiDataTrigger.EnterActions>
                                        <RemoveStoryboard BeginStoryboardName="IsFullyIndeterminateStoryboard" />
                                        <BeginStoryboard Storyboard="{StaticResource IsIndeterminateStoryboard}"
                                                 Name="IsIndeterminateStoryboard"/>
                                    </MultiDataTrigger.EnterActions>
                                    <MultiDataTrigger.ExitActions>
                                        <RemoveStoryboard BeginStoryboardName="IsIndeterminateStoryboard" />
                                    </MultiDataTrigger.ExitActions>
                                </MultiDataTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsIndeterminate" Value="True" />
                                        <Condition Property="Value" Value="0" />
                                        <Condition Property="IsVisible" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <MultiTrigger.EnterActions>
                                        <RemoveStoryboard BeginStoryboardName="IsIndeterminateStoryboard" />
                                        <BeginStoryboard Storyboard="{StaticResource IsFullyIndeterminateScaleStoryboard}"
                                                 Name="IsFullyIndeterminateStoryboard"/>
                                    </MultiTrigger.EnterActions>
                                    <MultiTrigger.ExitActions>
                                        <RemoveStoryboard BeginStoryboardName="IsFullyIndeterminateStoryboard" />
                                    </MultiTrigger.ExitActions>
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="XtmfListBoxItemNoDuration" TargetType="{x:Type ListBoxItem}">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                <Setter Property="Padding" Value="8"/>
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListBoxItem}">
                            <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Margin="{TemplateBinding Margin}"
                            ClipToBounds="{TemplateBinding ClipToBounds}">
                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup Name="CommonStates">
                                        <VisualStateGroup.Transitions>
                                            <VisualTransition GeneratedDuration="0:0:0.0" To="Normal">
                                                <VisualTransition.GeneratedEasingFunction>
                                                    <CircleEase EasingMode="EaseOut"/>
                                                </VisualTransition.GeneratedEasingFunction>
                                            </VisualTransition>
                                        </VisualStateGroup.Transitions>
                                        <VisualState Name="Normal"/>
                                        <VisualState Name="MouseOver">
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="MouseOverBorder" Storyboard.TargetProperty="Opacity"
                                                             To="0.1" Duration="0"/>
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState Name="Disabled"/>
                                    </VisualStateGroup>
                                    <VisualStateGroup Name="SelectionStates">
                                        <VisualStateGroup.Transitions>
                                            <VisualTransition GeneratedDuration="0:0:0.0"/>
                                        </VisualStateGroup.Transitions>
                                        <VisualState Name="Selected">
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="SelectedBorder"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="0.18" Duration="0"/>
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState Name="Unselected"/>
                                        <VisualState Name="SelectedUnfocused">
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="SelectedBorder"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="0.00" Duration="0"/>
                                            </Storyboard>
                                        </VisualState>
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>
                                <Grid>
                                    <Border x:Name="MouseOverBorder"
                                    Opacity="0"
                                    Background="{TemplateBinding Foreground, Converter={StaticResource BrushRoundConverter}}"/>

                                    <Border x:Name="SelectedBorder"
                                    Opacity="0"
                                    Background="{TemplateBinding Foreground, Converter={StaticResource BrushRoundConverter}}"
                                    RenderTransformOrigin="0.5,0.5">
                                        <Border.RenderTransform>
                                            <ScaleTransform ScaleX="1"/>
                                        </Border.RenderTransform>
                                    </Border>
                                    <wpf:Ripple Feedback="{TemplateBinding Foreground, Converter={StaticResource BrushRoundConverter}}"
                                        Focusable="False"
                                        Content="{TemplateBinding Content}"
                                        ContentTemplate="{TemplateBinding ContentTemplate}"
                                        ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                        Padding="{TemplateBinding Padding}"/>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Opacity" Value=".56" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="XtmfMaterialDesignFloatingHintTextBox" TargetType="{x:Type TextBox}" BasedOn="{StaticResource MaterialDesignTextBox}">
                <Setter Property="wpf:HintAssist.IsFloating" Value="True"/>
                <Setter Property="wpf:HintAssist.FloatingScale" Value="0.95"/>
            </Style>

            <Style x:Key="XtmfMaterialDesignFloatingHintComboBox" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource MaterialDesignFloatingHintComboBox}">
                <Setter Property="wpf:HintAssist.IsFloating" Value="True"/>
                <Setter Property="wpf:HintAssist.FloatingScale" Value="0.95"/>
            </Style>
        </ResourceDictionary>
    </Application.Resources>
</Application>
